name: Generate API Specification for Postman

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-api-spec:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Start FastAPI server
      run: |
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > ../server.pid
        sleep 10  # Wait for server to start
        
    - name: Verify server is running
      run: |
        curl -f http://localhost:8000/health || exit 1
        
    - name: Generate API specification
      run: |
        python scripts/generate_api_spec.py http://localhost:8000
        
    - name: Create API documentation
      run: |
        cat > api-endpoints.md << 'EOF'
        # StackHealth API Endpoints

        Generated on: $(date)

        ## Available Endpoints

        ### Authentication
        - `POST /auth/login` - Authenticate user and return access token
        - `POST /auth/register` - Register a new user
        - `GET /auth/me` - Get current user information
        - `GET /auth/users` - Get all users (admin only)
        - `POST /auth/manage-admin` - Grant or revoke admin privileges (admin only)
        - `POST /auth/setup-first-admin` - Setup the first admin user

        ### Health Checks
        - `GET /` - Basic health check
        - `GET /health` - Basic health check endpoint
        - `GET /health/detailed` - Detailed health check with system metrics
        - `GET /health/readiness` - Readiness check for Kubernetes
        - `GET /health/liveness` - Liveness check for Kubernetes

        ### Products
        - `POST /products` - Create a new product
        - `GET /products` - Get all products

        ### Scorecards
        - `POST /scorecards` - Submit a new scorecard with feedback
        - `GET /scorecards` - Get scorecards, optionally filtered by product and category
        - `GET /scorecards/{scorecard_id}` - Get a specific scorecard with all details
        - `GET /scorecards/{scorecard_id}/pdf` - Generate and return PDF report for a scorecard

        ### Analytics
        - `GET /trends/{product_id}/{category}` - Get quarterly trend data for a product's specific category
        - `GET /quarterly-improvement/{product_id}/{category}` - Get quarterly improvement data

        ## Authentication

        Most endpoints require authentication using Bearer tokens. To authenticate:

        1. Call `POST /auth/login` with email and password
        2. Use the returned `access_token` in the Authorization header: `Bearer <token>`

        ## Categories

        Valid scorecard categories:
        - `automation` - Test automation and framework metrics
        - `performance` - Performance testing and monitoring
        - `security` - Security scanning and practices
        - `cicd` - CI/CD pipeline maturity and DORA metrics

        ## Import to Postman

        1. Download the `stackhealth-api-collection.json` file
        2. Open Postman
        3. Click "Import"
        4. Select the JSON file
        5. Configure the `baseUrl` variable (default: http://localhost:8000)
        6. After logging in, set the `authToken` variable with your access token
        EOF
        
    - name: Stop FastAPI server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: api-specification
        path: |
          stackhealth-api-collection.json
          openapi.json
          api-endpoints.md
        retention-days: 30
        
    - name: Create release assets
      if: github.ref == 'refs/heads/main'
      run: |
        # Create a timestamped release directory
        mkdir -p release-assets
        cp stackhealth-api-collection.json release-assets/
        cp openapi.json release-assets/
        cp api-endpoints.md release-assets/
        
        # Create a summary file
        cat > release-assets/README.md << EOF
        # StackHealth API Specification
        
        Generated on: $(date)
        Commit: ${{ github.sha }}
        
        ## Files included:
        
        - \`stackhealth-api-collection.json\` - Postman collection ready for import
        - \`openapi.json\` - Raw OpenAPI 3.0 specification
        - \`api-endpoints.md\` - Human-readable API documentation
        
        ## How to use:
        
        ### Postman Collection
        1. Download \`stackhealth-api-collection.json\`
        2. Import into Postman
        3. Set environment variables:
           - \`baseUrl\`: Your API base URL (e.g., http://localhost:8000)
           - \`authToken\`: Your authentication token (get from /auth/login)
        
        ### OpenAPI Specification
        The \`openapi.json\` file can be used with any OpenAPI-compatible tool like:
        - Swagger UI
        - Insomnia
        - Stoplight
        - API testing frameworks
        
        EOF
        
    - name: Commit and push API spec (if changes)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create or update the api-spec directory
        mkdir -p api-spec
        cp stackhealth-api-collection.json api-spec/
        cp openapi.json api-spec/
        cp api-endpoints.md api-spec/
        
        # Check if there are changes
        if git diff --quiet HEAD -- api-spec/; then
          echo "No changes to API specification"
        else
          git add api-spec/
          git commit -m "ðŸ¤– Update API specification - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "âœ… API specification updated and committed"
        fi
